//Questionlink-https://leetcode.com/problems/stock-price-fluctuation/description/

class StockPrice {
public:
    map<int,int> mp;
    priority_queue<pair<int,int>> maxi;
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> mini;
    int curr;
    StockPrice() {
        curr=0;
    }
    
    void update(int timestamp, int price) {
        curr=max(timestamp,curr);
        mp[timestamp]=price;
        maxi.push({price,timestamp});
        mini.push({price,timestamp});
    }

    int current() {
        return mp[curr];
    }
    
    int maximum() {
        while(maxi.top().first != mp[maxi.top().second])
            maxi.pop();
        
        return maxi.top().first;
    }
    
    int minimum() {
         while(mini.top().first != mp[mini.top().second])
            mini.pop();
        
        return mini.top().first;
    }
};

/**
 * Your StockPrice object will be instantiated and called as such:
 * StockPrice* obj = new StockPrice();
 * obj->update(timestamp,price);
 * int param_2 = obj->current();
 * int param_3 = obj->maximum();
 * int param_4 = obj->minimum();
 */