//Questionlink-https://leetcode.com/problems/knight-probability-in-chessboard/description/

class Solution {
public:
    bool isvalid(int x,int y,int n){
        return x>=0 && y>=0 && x<n && y<n;
    }
    double knightProbability(int n, int k, int row, int column) {
        vector<vector<double>> curr(n,vector<double>(n,0.0));
        vector<vector<double>> next(n,vector<double>(n,0.0));
        curr[row][column]=1;
        vector<int> x={2,2,1,1,-1,-2,-1,-2};
        vector<int> y={-1,1,-2,2,2,1,-2,-1};
        for(int moves=0;moves<k;moves++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(curr[i][j]!=0){
                        for(int d=0;d<8;d++){
                            if(!isvalid(i+x[d],j+y[d],n)){
                                continue;
                            }
                            next[i+x[d]][j+y[d]]+=curr[i][j]/8.0;
                        }
                    }
                }
            }
            curr=next;
            fill(next.begin(),next.end(),vector<double>(n,0.0));
        }
        
        double prob=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                prob+=curr[i][j];
            }
        }
        return prob;
    }
};