//Questionlink-https://leetcode.com/problems/partition-to-k-equal-sum-subsets/description/

class Solution {
public:
    bool solve(vector<int> &nums,int k,int target,int sum,vector<bool> &visited,int ind){
        if(k==1){
            return true;
        }
        if(ind==nums.size()){
            return false;
        }
        if(sum==target){
            return solve(nums,k-1,target,0,visited,0);
        }
        for(int i=ind;i<nums.size();i++){
            if(visited[i] or sum+nums[i]>target) continue;
            visited[i]=true;
            if(solve(nums,k,target,sum+nums[i],visited,i+1))
                return true;
            visited[i]=false;
        }
        return false;
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum=0;
        vector<bool> visited(nums.size(),false);
        for(auto x:nums){
            sum+=x;
        }
        sort(nums.begin(),nums.end(),greater<int>());
        if (nums.size() < k || sum % k) return false;
        return solve(nums,k,sum/k,0,visited,0);      
    }
};