//Questionlink-https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/description/


//using dijkstra's algorithm
class Solution {
public:
    vector<int> ans;
    void foundcity(vector<vector<pair<int,int>>> graph,int src,int n,int t){
        vector<int> dis(n,INT_MAX);
        dis[src]=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
        q.push({0,src});
        while(!q.empty()){
            int currnode=q.top().second;
            int currdis=q.top().first;
            q.pop();
            for(auto neighbours:graph[currnode]){
                if(dis[currnode]+neighbours.second<dis[neighbours.first]){
                    dis[neighbours.first]=dis[currnode]+neighbours.second;
                    q.push({dis[neighbours.first],neighbours.first});
                }
            }
        }
        int c=-1;
        for(auto x:dis){
            c+=(x<=t)?1:0;
        }
        ans[src]=c;
        return;
    }
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        ans.resize(n,0);
         vector<vector<pair<int,int>>> graph(n);
        for(auto x:edges){
            graph[x[0]].push_back({x[1],x[2]});
            graph[x[1]].push_back({x[0],x[2]});
        }
        for(int i=0;i<n;i++){
            foundcity(graph,i,n,distanceThreshold);
        }
        int mini=n;
        int res=0;
        for(int i=0;i<n;i++){
            if(ans[i]<=mini){
                mini=ans[i];
                res=i;
            }
        }
        
        return res;
    }
};

//using floyd warshall
class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<int>> dis(n, vector<int> (n, int(1e6)));   
        for(int i=0; i<n; i++)      //Initialising distance needed to move from a node to itself = 0
            dis[i][i]=0;
        
        for(auto edge : edges){     //Forming the edges given between nodes
            int u=edge[0], v=edge[1], w=edge[2];
            dis[u][v]=dis[v][u]=w;
        }
        
        for(int k=0; k<n; k++)
            for(int i=0; i<n; i++)
                for(int j=0; j<n; j++)
                    if(dis[i][j]>dis[i][k]+dis[k][j])       //applying Floyd Warshall
                        dis[i][j]=dis[i][k]+dis[k][j];      //when the distance to travel from a node to another is smaller when k is an intermediate node
         
        int ans=0, ans_count=n;
        for(int i=0; i<n; i++){         //traversing for each node
            int count=0;
            for(int j=0; j<n; j++)      //traversing each jth node from ith node
                if(dis[i][j]<=distanceThreshold)        //if distance is less than threshold distance, increment count
                    count++;
    
            if(count<=ans_count){       //if count is less tha or equal to min count found, change the values
                ans_count=count;
                ans=i;
            }
        }
        
        return ans;         //return answer
    }
};